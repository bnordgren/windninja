<!DOCTYPE html>
<html>
<meta charset="UTF-8">
<head>
 <style>
  html, body {
  height: 100%;
  width: 100%;
  overflow: hidden;
 }
 </style>
    <title>Leaflet.draw drawing and editing tools</title>

    <link rel="stylesheet" href="leaflet/leaflet.css"/>
    <link rel="stylesheet" href="leaflet-draw/leaflet-draw.css"/>
    <link rel="stylesheet" href="maplibre-gl-js/maplibre-gl.css"/>

    <script src="./maplibre-gl-js/maplibre-gl.js"></script>
    <script src="./leaflet/leaflet-src.js"></script>
    <script src="./leaflet-draw/leaflet-draw.js"></script>
    <script src="./esri-leaflet/esri-leaflet.js"></script>
    <script src="./esri-leaflet-vector/esri-leaflet-vector.js"></script>

</head>
<body>
 <div id="map" style="width: 100%; height: 100%; border: 1px solid #ccc"></div>
<script>
    // Get a valid key from our server
    var apiKey = "";
    function getKey() {
     // don't call this
     return
     xhr = new XMLHttpRequest();
     var url = "https://windninja.org/mapkey/";
     xhr.open("GET", url, true);
     xhr.onreadystatechange = function () {
     // readyState == HEADER_RECEIVED or DONE is fine (2 or 4)
     // We need to read the return on the api call, and report a valid
     // error.  These are worthless.
      if (xhr.readyState == 4 && xhr.status == 200) {
       apiKey = JSON.parse(xhr.responseText).key;
       alert(apiKey);
      } else {
       console.log("failed");
      }
     }
     xhr.send(null);
    }
    // getKey();

    var apiKey = "AAPKf9ef3391313b4d7f900b7a18f102540aFpyZhpR4RoW0ZOGTZir7bOe6sxOSfmugdCTJqPl6_iBf1IkADvL6gnMZQ_DwbW1-" ;
    var map = L.map("map", {
      minZoom : 2
    }) ; 
    map.setView([43.62455, -113.2971], 8) ; 
    var basemapEnum = "ArcGIS:Topographic" ; 
    L.esri.Vector.vectorBasemapLayer(basemapEnum, {
      apiKey: apiKey
    }).addTo(map) ;


    var mbrLayer = new L.FeatureGroup();
    map.addLayer(mbrLayer);

    var drawControl = new L.Control.Draw({
        position: 'topright',
        draw: {
            polyline: false,
            polygon: false,
            circle: false,
            marker: false,
            circlemarker: false,
            rectangle: true
        },
        edit: {
         featureGroup: mbrLayer,
         remove: true
        }
    });
    map.addControl(drawControl);

    map.on(L.Draw.Event.DRAWSTART, function (e) {
        mbrLayer.clearLayers();
    });

    map.on(L.Draw.Event.CREATED, function (e) {
        mbrLayer.addLayer(e.layer);
        map.addLayer(mbrLayer);
        console.log(mbr());
    });
    function mbr() {
     if(mbrLayer.getLayers().length > 0){
      var b = mbrLayer.getLayers()[0]._bounds;
      b._southWest.lng = b._southWest.lng % 360;
      if(b._southWest.lng < -180) {
        b._southWest.lng += 360;
      }
      b._northEast.lng = b._northEast.lng % 360;
      if(b._northEast.lng < -180) {
        b._northEast.lng += 360;
      }
      // switch to negative longitudes if needed
      if(b._southWest.lng > 180){
        b._southWest.lng -= 360;
      }
      if(b._northEast.lng > 180){
        b._northEast.lng -= 360;
      }
      return [b._southWest.lng, b._northEast.lng, b._southWest.lat, b._northEast.lat];
     }
     return null;
    }
</script>
</body>
</html>
